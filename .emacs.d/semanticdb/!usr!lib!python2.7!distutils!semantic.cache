;; Object distutils/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "distutils/"
  :tables (list 
   (semanticdb-table "core.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"distutils.core

The only module that needs to be imported to use the Distutils; provides
the 'setup' function (which is to be called from the setup script).  Also
indirectly provides the Distribution and Command classes, although they are
really defined in distutils.dist and distutils.cmd.
\"\"\"" code nil nil [1 298])
            ("__revision__" variable nil nil [300 321])
            ("sys" include nil nil [323 333])
            ("os" include nil nil [334 343])
            ("distutils.debug" include nil nil [345 378])
            ("" code nil nil [408 510])
            ("distutils.util" include nil nil [511 560])
            ("distutils.dist" include nil nil [640 679])
            ("distutils.cmd" include nil nil [680 713])
            ("distutils.config" include nil nil [714 756])
            ("distutils.extension" include nil nil [757 798])
            ("USAGE" variable nil nil [1033 1225])
            ("gen_usage" function (:arguments 
              ( ("script_name" variable nil (reparse-symbol function_parameters) [1241 1252]))              ) nil [1227 1336])
            ("_setup_stop_after" variable nil nil [1414 1438])
            ("_setup_distribution" variable nil nil [1439 1465])
            ("setup_keywords" variable nil nil [1518 1924])
            ("extension_keywords" variable nil nil [1982 2324])
            ("setup" function
               (:documentation "The gateway to the Distutils: do everything your setup script needs
    to do, in a highly flexible and user-driven way.  Briefly: create a
    Distribution instance; find and parse config files; parse the command
    line; run each Distutils command found there, customized by the options
    supplied to 'setup()' (as keyword arguments), in config files, and on
    the command line.

    The Distribution instance might be an instance of a class supplied via
    the 'distclass' keyword argument to 'setup'; if no such class is
    supplied, then the Distribution class (in dist.py) is instantiated.
    All other arguments to 'setup' (except for 'cmdclass') are used to set
    attributes of the Distribution instance.

    The 'cmdclass' argument, if supplied, is a dictionary mapping command
    names to command classes.  Each command encountered on the command line
    will be turned into a command class, which is in turn instantiated; any
    class found in 'cmdclass' is used in place of the default, which is
    (for command 'foo_bar') class 'foo_bar' in module
    'distutils.command.foo_bar'.  The command class must provide a
    'user_options' attribute which is a list of option specifiers for
    'distutils.fancy_getopt'.  Any command-line options between the current
    and the next command are used to set attributes of the current command
    object.

    When the entire command-line has been successfully parsed, calls the
    'run()' method on each command object in turn.  This method will be
    driven entirely by the Distribution object (which each command object
    has a reference to, thanks to its constructor), and the
    command-specific options that became attributes of each command
    object.
    "
                :arguments 
                  ( ("attrs" variable nil (reparse-symbol function_parameters) [2336 2343]))                  )
                nil [2326 6512])
            ("run_setup" function
               (:documentation "Run a setup script in a somewhat controlled environment, and
    return the Distribution instance that drives things.  This is useful
    if you need to find out the distribution meta-data (passed as
    keyword args from 'script' to 'setup()', or the contents of the
    config files or command-line.

    'script_name' is a file that will be run with 'execfile()';
    'sys.argv[0]' will be replaced with 'script' for the duration of the
    call.  'script_args' is a list of strings; if supplied,
    'sys.argv[1:]' will be replaced by 'script_args' for the duration of
    the call.

    'stop_after' tells 'setup()' when to stop processing; possible
    values:
      init
        stop after the Distribution instance has been created and
        populated with the keyword arguments to 'setup()'
      config
        stop after config files have been parsed (and their data
        stored in the Distribution instance)
      commandline
        stop after the command-line ('sys.argv[1:]' or 'script_args')
        have been parsed (and the data stored in the Distribution)
      run [default]
        stop after all commands have been run (the same as if 'setup()'
        had been called in the usual way

    Returns the Distribution instance, which provides all information
    used to drive the Distutils.
    "
                :arguments 
                  ( ("script_name" variable nil (reparse-symbol function_parameters) [6528 6539])
                    ("script_args" variable nil (reparse-symbol function_parameters) [6541 6552])
                    ("stop_after" variable nil (reparse-symbol function_parameters) [6559 6569]))                  )
                nil [6514 9094]))          
    :file "core.py"
    :pointmax 9094
    :fsize 9093
    :lastmodtime '(21201 25441 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "debug.py"
    :file "debug.py"
    :fsize 162
    :lastmodtime '(21201 25441 0 0)
    )
   (semanticdb-table "util.py"
    :file "util.py"
    :fsize 18723
    :lastmodtime '(21201 25441 0 0)
    )
   (semanticdb-table "dist.py"
    :file "dist.py"
    :fsize 50049
    :lastmodtime '(21201 25441 0 0)
    )
   (semanticdb-table "cmd.py"
    :file "cmd.py"
    :fsize 19270
    :lastmodtime '(21201 25441 0 0)
    )
   (semanticdb-table "config.py"
    :file "config.py"
    :fsize 4131
    :lastmodtime '(21201 25441 0 0)
    )
   (semanticdb-table "extension.py"
    :file "extension.py"
    :fsize 10904
    :lastmodtime '(21201 25441 0 0)
    )
   )
  :file "!usr!lib!python2.7!distutils!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
